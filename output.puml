@startuml





/' Objects '/

class Acceptor {
	+Acceptor()
	+Acceptor(EventLoop* loop)
	-function<void(Socket*)
	+~Acceptor()
	-chl_ : Channel*
	-loop_ : EventLoop*
	-inet_addr_ : InetAddress*
	-sock_ : Socket*
	+accept_connection() : void
	+set_cb(function<void ( Socket* )> cb) : void
}


class Buffer {
	+Buffer()
	+~Buffer()
	+str_data() : char*
	+size() : int
	-buf_ : string
	+append(const char* str, int size) : void
	+clear() : void
	+getline(istream is) : void
	+set_buf(const char*) : void
}


class Channel {
	+Channel()
	+Channel(EventLoop* loop, int fd, function<void ( )> func)
	-function<void()
	+~Channel()
	-loop_ : EventLoop*
	+is_ctl() : bool
	-is_ctl_ : bool
	+fd() : int
	-fd_ : int
	+events() : uint32_t
	-events_ : uint32_t
	+revents() : uint32_t
	-revents_ : uint32_t
	+handle_event() : void
	+set_callback(std::function<void ( )> cb) : void
	-set_revents(uint32_t revents) : void
	+update_channel(unsigned int events) : void
}


class Connection {
	+Connection()
	+Connection(EventLoop* loop, Socket* clnt_sock)
	-function<void(Socket*)
	-function<void(Connection*)
	+~Connection()
	-conn_buffer_ : Buffer*
	-read_buf_ : Buffer*
	-write_buf_ : Buffer*
	-chl_ : Channel*
	-loop_ : EventLoop*
	-clnt_sock_ : Socket*
	-state_ : State
	+Rbuf_data() : char*
	+Wbuf_data() : char*
	+clnt_sockfd() : int
	+state() : int
	+Close() : void
	+Read(bool is_block) : void
	-ReadBlocking() : void
	-ReadNonBlocking() : void
	+Write(bool is_block) : void
	-WriteBlocking() : void
	-WriteNonBlocking() : void
	+echo(int fd) : void
	-handle_event() : void
	-release_conn() : void
	+set_Wbuf(const char* str) : void
	-set_del_conn_callback(function<void ( Socket* )> cb) : void
	-set_on_conn_callback(function<void ( Connection* )> cb) : void
}


class Epoll {
	+Epoll()
	+~Epoll()
	-epfd_ : int
	-{static} events : static epoll_event[]
	+poll(int timeout) : vector<Channel*>
	+ctl(int op, int fd, epoll_event* ev) : void
	+update_channel(Channel* chl) : void
}


class EventLoop {
	+EventLoop()
	+~EventLoop()
	-ep_ : Epoll*
	-quit_ : bool
	+loop() : void
	+quit() : void
	+update_channel(Channel* chl) : void
}


class InetAddress {
	+InetAddress()
	+InetAddress(const char* ip, uint16_t port)
	+~InetAddress()
	+addr_len : socklen_t
	+addr : struct sockaddr_in
}


class Server {
	+Server(EventLoop* loop, function<void ( Connection* )> on_conn_callback)
	-function<void(Connection*)
	+~Server()
	-accptor_ : Acceptor*
	-main_loop_ : EventLoop*
	-pool_ : ThreadPool*
	-conns_ : unordered_map<int, Connection*>
	-concurrency_ : unsigned int
	-random_() : unsigned int
	-sub_loops_ : vector<EventLoop*>
	-new_connection(Socket* serv_sock) : void
	+on_connection(function<void ( Connection* )> cb) : void
	-release_connection(Socket* clnt_sock) : void
}


class Socket {
	+Socket()
	+Socket(int)
	+~Socket()
	+accept(InetAddress*) : Socket*
	-fd_ : int
	+getFd() : int
	+bind(InetAddress*) : void
	+connect(InetAddress*) : void
	+listen() : void
	+setnonblocking() : void
}


class ThreadPool {
	+ThreadPool(unsigned int concurrency)
	-queue<function<void()
	+~ThreadPool()
	+en_que(F&& f, Args&& ... args) : auto
	-stop_ : bool
	-cv_ : condition_variable
	-mut_ : mutex
	-threads_ : vector<thread>
}


enum Connection::State {
	Closed
	Connected
	Failed
	Handshaking
	Invalid
}





/' Inheritance relationships '/




/' Aggregation relationships '/

Acceptor o-- Channel


Acceptor o-- EventLoop


Acceptor o-- InetAddress


Acceptor o-- Socket


Channel o-- EventLoop


Connection "3" o-- Buffer


Connection o-- Channel


Connection o-- EventLoop


Connection o-- Socket


EventLoop o-- Epoll


Server o-- Acceptor


Server o-- Connection


Server "2" o-- EventLoop


Server o-- ThreadPool






/' Nested objects '/

Connection +-- Connection::State




@enduml
